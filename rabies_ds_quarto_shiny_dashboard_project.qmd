---
title: "Global Patterns of Rabies Mortality"
format:
  dashboard:
    expandable: false
    nav-buttons: [github]
    github: https://github.com/pmmagusiak/rabies_ds_quarto_shiny_dashboard_project
    logo: images/logo.png
    theme: 
      - sandstone
      - style/custom.scss
server: shiny
include-before-body:
  text: |
    <script>
      $(document).ready(function() {
        var heights= $('.value-box-title').map(function() {
          return $(this).height();
        }).get();
        $('.value-box-title').css('height', Math.max(...heights));
      })
    </script>
date: 2025-01-23
---

```{r}
#| label: load-packages
#| context: setup
#| message: false

library(tidyverse)
library(data.table)
library(skimr)
library(janitor)
library(countrycode)
library(DT)
library(shiny)
library(bslib)
library(bsicons)
library(rnaturalearth)
library(rnaturalearthdata)
library(leaflet)
library(shinyWidgets)
library(plotly)
```

```{r}
#| label: load-data
#| context: setup
#| message: false

# Importing files into R environment

human_rabies_death <- fread("data/reported_number_of_human_rabies_death.csv")

hdi <- fread("data/human_development_index.csv")
```

```{r}
#| label: prep-data
#| context: setup
#| include: false
#| message: false

# Using skimr package to summary data tables and overview missing values,

# duplicates and other information, janitor package to help tidying.

# Focusing on human_rabies_death database

# Checking if there are any rows with null values

human_rabies_death |> filter(if_any(everything(), is.null))

# Assessing columns which are useful for my analysis

skim_without_charts(human_rabies_death)

glimpse(human_rabies_death)

human_rabies_death |>
  filter(Value != FactValueNumeric)

human_rabies_death <- human_rabies_death |>
  select(
    ParentLocationCode,
    ParentLocation,
    SpatialDimValueCode,
    Location,
    Period,
    FactValueNumeric
  ) |>
  clean_names()

# Focusing on hdi database

# Checking if there are any rows with null values

hdi |> filter(if_any(everything(), is.null))

# Assessing columns which are useful for my analysis

# This database has multiple columns containing country development indicators

# per year, it is more suitable to pivot them

hdi <- hdi |>
  pivot_longer(
    cols = c(-(1:5), -166, -581),
    names_pattern = "^(.*)(\\(\\d+\\))$",
    names_to = c(".value", "year")
  ) |>
  mutate(year = parse_number(year)) |>
  clean_names()

# I prefer to leave many variables for future analysis, for now I will only

# need HDI columns

hdi_rabies <- hdi |>
  select(1:5, 8, 9, 15, 20) |>
  filter(between(year, 2010, 2021))

# Joining the databases

human_rabies_death |>
  count(period)

human_rabies_death <- human_rabies_death |>
  filter(period != 2022)

# Checking if country names are equivalent

human_rabies_death |> count(n_distinct(location)) # this db has 194 countries

hdi_rabies |> count(n_distinct(country)) # this db has 195 countries

human_rabies_death |>
  anti_join(hdi_rabies, join_by(spatial_dim_value_code == iso3))

human_rabies_death_processed <- human_rabies_death |>
  filter(!spatial_dim_value_code %in% c("COK", "NIU")) |>
  mutate(location = countrycode(spatial_dim_value_code, "iso3c", "country.name"))

hdi_rabies_processed <- hdi_rabies |>
  filter(!human_development_groups == "") |> # Filtering out Somalia

  mutate(human_development_groups = factor(
    human_development_groups,
    levels = c("Low", "Medium", "High", "Very High")
  )) |>
  mutate(country = countrycode(iso3, "iso3c", "country.name"))

hdi_rabies_death_joined <- hdi_rabies_processed |>
  left_join(
    human_rabies_death_processed,
    join_by(country == location, year == period)
  ) |>
  select(-undp_developing_regions, -spatial_dim_value_code) |>
  select(1:2, 9:10, 5:8, 4, 3, 11)
```

```{r}
#| label: country-shapes-prep-data
#| context: setup
#| include: false
#| message: false

# Creating world map df with countries polygons, Antarctica omitted for better viewing experience. Columns not needed removed. Editing additional info for countries.

world_map_df <- ne_countries(scale = "medium", returnclass = "sf") |>
  filter(!name %in% c("Antarctica")) |>
  select(name, iso_a3_eh, note_brk, geometry) |>
  mutate(note_brk = case_when(is.na(note_brk) ~ "", TRUE ~ note_brk)) |>
  mutate(note_brk = str_replace(
    note_brk,
    "^Self admin\\.\\; Claimed by (.+)$",
    "Self administrated, claimed by \\1"
  ))

# Correcting country names and filtering out countries without country code and Australia's administrative units. Populating world map df with rabies death data, filtering out dependent territories, creating new categorical variable for better visualisation

world_map_rabies_df <- world_map_df |>
  filter(!name %in% c("Indian Ocean Ter.", "Ashmore and Cartier Is.")) |>
  filter(iso_a3_eh != -99) |>
  mutate(name = countrycode(iso_a3_eh, "iso3c", "country.name")) |>
  right_join(hdi_rabies_death_joined, join_by(iso_a3_eh == iso3, name == country)) |>
  mutate(fact_value_categories = case_when(
    fact_value_numeric == 0 ~ "0",
    fact_value_numeric %in% 1:10 ~ "1-10",
    fact_value_numeric %in% 11:100 ~ "11-100",
    fact_value_numeric %in% 101:500 ~ "101-500",
    fact_value_numeric > 500 ~ "500+",
    is.na(fact_value_numeric) ~ "Data unavailable"
  )) |>
  mutate(fact_value_categories = factor(fact_value_categories, ordered = TRUE, levels = c("500+", "101-500", "11-100", "1-10", "0", "Data unavailable")))
```

```{r}
#| label: plot-prep-data
#| context: setup
#| include: false
#| message: false

hdi_rabies_death_joined |>
  group_by(country) |>
  summarise(sum_of_deaths = sum(fact_value_numeric, na.rm = TRUE)) |>
  arrange(desc(sum_of_deaths))

# I would say that there is 6 countries that stands out in terms of number of deaths

world_deaths <- hdi_rabies_death_joined |> 
  group_by(year) |> 
  summarize(global_yearly_deaths = sum(fact_value_numeric, na.rm = TRUE)) |> 
  mutate(label = "Global Yearly Deaths") |> 
  mutate(label = factor(label))

# world deaths variable for the second line plot

hdi_rabies_death_joined <- hdi_rabies_death_joined |> 
  group_by(country) |> 
  mutate(sum_of_deaths = sum(fact_value_numeric, na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(label = paste0(country, " (", sum_of_deaths, ")")) |> 
  mutate(label = factor(label)) |> 
  mutate(label = fct_reorder(label, sum_of_deaths, .desc = TRUE))

```

# Human

## Sidebar - Human {.sidebar}

::: {.sidebar-div}

```{r}
sliderTextInput(
  inputId = "year",
  label = "Choose a year:",
  choices = c(2010:2021),
  selected = 2021,
  grid = TRUE,
  force_edges = TRUE,
  width = "98%"
)
```

::: flex-inline
```{r}
actionButton("minus", label = "-", class="btn-sm") 
```

```{r}
actionButton("plus", label = "+", class="btn-sm")
```
:::

```{r}
hdg_choices <- c("Low", "Medium", "High", "Very High")

virtualSelectInput(
  inputId = "hdg",
  label = "Choose Human Development Index group:",
  choices = hdg_choices,
  selected = hdg_choices,
  multiple = TRUE,
  width = "100%",
  dropboxWrapper = "body"
)
```

::: {.callout-div}
::: {.callout-note collapse="true"}
## Data Sources & Limitations

This dashboard presents data on reported human rabies deaths sourced from the [WHO Global Health Observatory](https://www.who.int/data/gho/data/indicators/indicator-details/GHO/reported-number-of-human-rabies-deaths) and Human Development Index (HDI) rankings derived from the [Kaggle HDI dataset](https://www.kaggle.com/datasets/iamsouravbanerjee/human-development-index-dataset), based on the 2021 UN Human Development Report.

**Note:** Rabies death data is severely underreported, particularly in many African countries, due to limited surveillance and reporting systems. As such, the true burden of disease is likely underestimated.
:::
:::

:::

## Main body

### Value boxes {height="19%"}

```{r}
value_box(
  title = "Year",
  value = textOutput("year"),
  theme = value_box_theme(bg = "#3C5B6F")
)
```

```{r}
value_box(
  title = "Total deaths",
  value = textOutput("total"),
  theme = value_box_theme(bg = "#3C5B6F")
)
```

```{r}
value_box(
  title = "Top country by human rabies deaths",
  value = textOutput("country"),
  theme = value_box_theme(bg = "#3C5B6F")
)
```

```{r}
value_box(
  title = "Top country death count",
  value = textOutput("death_count"),
  theme = value_box_theme(bg = "#3C5B6F")
)
```

```{r}
value_box(
  title = "Top country contribution to global deaths",
  value = textOutput("percent"),
  theme = value_box_theme(bg = "#3C5B6F")
)
```

### Row - Tabset of map / plot / data {.tabset height="81%"}

```{r}
#| title: Global burden of human rabies deaths

leafletOutput("map")
```

```{r}
#| title: Rabies Mortality Timeline â€“ Plot

plotlyOutput("plot")

# bslib::card(full_screen = TRUE, card_body(plotlyOutput("plot")))  <- This line of code enables expand button

```

```{r}
#| title: Human rabies deaths data

rowCallback <- c(
    "function(row, data){",
    "  for(var i=0; i<data.length; i++){",
    "    if(data[i] === null){",
    "      $('td:eq('+i+')', row).html('NA')",
    "        .css({'color': 'rgb(151,151,151)', 'font-style': 'italic'});",
    "    }",
    "  }",
    "}"  
  )

hdi_rabies_death_joined |> 
  select(-13) |> 
  datatable(colnames = c("ISO 3 country code", "Country", "WHO region code", "WHO region", "Year", "Human Development Index (HDI)", "HDI female", "HDI male", "HDI rank (2021)", "HDI group (2021)", "Death count", "Total deaths"), options = list(rowCallback = JS(rowCallback)))

```

```{r}
#| context: server

# Slider buttons

observeEvent(input$plus, {
    new_value <- input$year + 1
    if (new_value <= 2021) {  
      updateSliderTextInput(session, "year", selected = new_value)
    }
  })
  
observeEvent(input$minus, {
    new_value <- input$year - 1
    if (new_value >= 2010) {  
      updateSliderTextInput(session, "year", selected = new_value)
    }
  })

# Value boxes code

year <- reactive({
  hdi_rabies_death_joined |>
    filter(year == input$year) |>
    slice_head(n = 1) |>
    pull(year)
})

total_deaths <- reactive({
  hdi_rabies_death_joined |>
    filter(year == input$year) |>
    summarise(total_deaths = sum(fact_value_numeric, na.rm = TRUE)) |>
    pull(total_deaths)
})

country <- reactive({
  hdi_rabies_death_joined |>
    filter(year == input$year) |>
    arrange(desc(fact_value_numeric)) |>
    slice_head(n = 1) |>
    pull(country)
})

death_count <- reactive({
  hdi_rabies_death_joined |>
    filter(year == input$year) |>
    arrange(desc(fact_value_numeric)) |>
    slice_head(n = 1) |>
    pull(fact_value_numeric)
})

percent_all_deaths <- reactive({
  hdi_rabies_death_joined |>
    filter(year == input$year) |>
    mutate(percent_all_deaths = round(fact_value_numeric / sum(fact_value_numeric, na.rm = TRUE) * 100)) |>
    arrange(desc(fact_value_numeric)) |>
    slice_head(n = 1) |>
    pull(percent_all_deaths)
})

output$year <- renderText({
  year()
})

output$total <- renderText({
  total_deaths()
})

output$country <- renderText({
  country()
})

output$death_count <- renderText({
  death_count()
})

output$percent <- renderText({
  paste0(percent_all_deaths(), "%")
})

# Map code

map_filtered <- reactive({
  subset(world_map_rabies_df, human_development_groups %in% input$hdg) |>
    filter(year == input$year)
})

output$map <- renderLeaflet({
  world_map_df |>
    leaflet() |>
    addProviderTiles("CartoDB.Positron", options = providerTileOptions(minZoom = 2)) |>
    addPolygons(
      color = "black",
      weight = .5,
      opacity = 1,
      label = ~ lapply(paste0("<b>", name, "</b>", "<br/>", note_brk), htmltools::HTML)
    ) |>
    setView(0, 20, zoom = 2) |>
    setMaxBounds(
      lng1 = -180, lat1 = -60,
      lng2 = 180,  lat2 = 85
    )
})

observe({
  pal <- colorFactor(palette = c("#FFF4D9", "#FFEB9A", "#FFC94A", "#F26B30", "#960018"), levels = c("0", "1-10", "11-100", "101-500", "500+"))

  leafletProxy("map", data = map_filtered()) |>
    clearGroup("dynamic") |>
    clearControls() |>
    addPolygons(
      group = "dynamic",
      color = "black",
      fillColor = ~ pal(fact_value_categories),
      weight = .5,
      opacity = 1,
      fillOpacity = .7,
      highlightOptions = highlightOptions(
        weight = 2.5,
        color = "#666",
        fillOpacity = .7,
        bringToFront = TRUE
      ),
      label = ~ lapply(paste0("<b>", name, "</b>", "<br/>", "Death count: ", fact_value_numeric), htmltools::HTML)
    ) |>
    addLegend("bottomright", pal = pal, values = ~fact_value_categories, title = "Number of deaths", opacity = 1) |>
    setView(0, 20, zoom = 2)
})

# Plot code

output$plot <- renderPlotly({
  ggplot <- hdi_rabies_death_joined |>
  filter(country %in% c("China", "India", "Philippines", "Myanmar (Burma)", "Kenya", "Vietnam")) |>
  ggplot(aes(x = year, y = fact_value_numeric, color = label)) +
  geom_line(linewidth = 1) +  
  geom_line(
    data = world_deaths,
    aes(x = year, y = global_yearly_deaths, color = label),
    inherit.aes = FALSE,
    linewidth = 1.2,
    linetype = 3
  ) + 
  labs(
    x = "Year",
    y = "Number of deaths",
    color = "Country (Total Deaths)",
    title = "Annual Human Rabies Deaths in Top-6 Highest-Burden Countries and Worldwide",
  ) +
  scale_color_manual(values = c("Global Yearly Deaths" = "black", "China (9354)" = "#1f77b4",
    "India (4351)" = "#ff7f0e",
    "Philippines (3014)" = "#2ca02c",
    "Myanmar (Burma) (1318)" = "#d62728",
    "Kenya (1115)" = "#9467bd",
    "Vietnam (1038)" = "#8c564b")) +
  scale_x_continuous(n.breaks = 10) +
  # theme_light()
  theme_minimal()
  
  ggplotly(ggplot) |> layout(xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE)) |> config(modeBarButtonsToRemove = c("zoomIn2d", "zoomOut2d"))

})
```

# Animal
